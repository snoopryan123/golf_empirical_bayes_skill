d0
d1 = d0 %>% filter(season_type == 3) # playoffs
d1
d2 = d1 %>% filter(team_home_away == "away") # away team as `main` team
names(d2)
d3 =
d2 %>%
select(
game_id, game_date, season, game_date, team_slug, opponent_team_slug,
team_home_away, team_winner, team_score, opponent_team_score,
) %>%
rowwise() %>%
mutate(
team_A = sort(c(team_slug, opponent_team_slug))[1],
team_B = sort(c(team_slug, opponent_team_slug))[2],
series = paste0(team_A,"_",team_B,"_",season),
team_away = team_slug,
team_home = opponent_team_slug,
) %>%
ungroup() %>%
mutate(
score_away = team_score,
score_home = opponent_team_score,
away_wins = score_away > score_home,
) %>%
select(-c(team_slug, opponent_team_slug, team_score, opponent_team_score, team_home_away, team_winner)) %>%
arrange(game_date) %>%
group_by(series) %>%
mutate(game_num = row_number()) %>%
ungroup() %>%
arrange(season, game_date)
View(d3)
### how often does the away team win in game 1?
d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==1) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
### how often does the away team win in game 2?
d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
### how often does the away team win in game 2 given they win in game 1?
d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_wins_game_1 = first(away_wins)) %>%
filter(away_wins_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
### how often does the away team win in game 2 given they lost in game 1?
d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_loses_game_1 = !first(away_wins)) %>%
filter(away_loses_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
### how often does the away team win in game 1?
p1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==1) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
p1
### how often does the away team win in game 1?
p1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==1) %>%
ungroup() %>%
reframe(p1 = mean(away_wins)*100)
p1$p1
### how often does the away team win in game 2?
p2 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2 = mean(away_wins)*100)
p2
2
2
### how often does the away team win in game 2 given they win in game 1?
p21 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_wins_game_1 = first(away_wins)) %>%
filter(away_wins_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(mean(away_wins)*100)
### how often does the away team win in game 2 given they win in game 1?
p21 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_wins_game_1 = first(away_wins)) %>%
filter(away_wins_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p21 = mean(away_wins)*100)
p21
### how often does the away team win in game 2 given they lost in game 1?
p2_not1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_loses_game_1 = !first(away_wins)) %>%
filter(away_loses_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2_not1 = mean(away_wins)*100)
p2_not1
### how often does the away team win in game 1?
p1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==1) %>%
ungroup() %>%
reframe(p1 = mean(away_wins)*100)
p1
### how often does the away team win in game 2?
p2 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2 = mean(away_wins)*100)
p2
### how often does the away team win in game 2 given they win in game 1?
p21 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_wins_game_1 = first(away_wins)) %>%
filter(away_wins_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p21 = mean(away_wins)*100)
p21
### how often does the away team win in game 2 given they lost in game 1?
p2_not1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_loses_game_1 = !first(away_wins)) %>%
filter(away_loses_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2_not1 = mean(away_wins)*100)
p2_not1
###
p1$p1
p2$p1
p21$p21
p2_not1$p2_not1
###
p1$p1
p2$p2
p21$p21
p2_not1$p2_not1
# d0 = load_nba_team_box(seasons = c(2014:2019, 2021:2025))
d0 = load_nba_team_box(seasons = c(2015:2019, 2021:2025))
d0
d1 = d0 %>% filter(season_type == 3) # playoffs
d1
d2 = d1 %>% filter(team_home_away == "away") # away team as `main` team
names(d2)
d3 =
d2 %>%
select(
game_id, game_date, season, game_date, team_slug, opponent_team_slug,
team_home_away, team_winner, team_score, opponent_team_score,
) %>%
rowwise() %>%
mutate(
team_A = sort(c(team_slug, opponent_team_slug))[1],
team_B = sort(c(team_slug, opponent_team_slug))[2],
series = paste0(team_A,"_",team_B,"_",season),
team_away = team_slug,
team_home = opponent_team_slug,
) %>%
ungroup() %>%
mutate(
score_away = team_score,
score_home = opponent_team_score,
away_wins = score_away > score_home,
) %>%
select(-c(team_slug, opponent_team_slug, team_score, opponent_team_score, team_home_away, team_winner)) %>%
arrange(game_date) %>%
group_by(series) %>%
mutate(game_num = row_number()) %>%
ungroup() %>%
arrange(season, game_date)
View(d3)
### how often does the away team win in game 1?
p1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==1) %>%
ungroup() %>%
reframe(p1 = mean(away_wins)*100)
p1
### how often does the away team win in game 2?
p2 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2 = mean(away_wins)*100)
p2
### how often does the away team win in game 2 given they win in game 1?
p21 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_wins_game_1 = first(away_wins)) %>%
filter(away_wins_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p21 = mean(away_wins)*100)
p21
### how often does the away team win in game 2 given they lost in game 1?
p2_not1 = d3 %>%
arrange(series, game_date) %>%
group_by(series) %>%
mutate(away_loses_game_1 = !first(away_wins)) %>%
filter(away_loses_game_1) %>%
filter(game_num==2) %>%
ungroup() %>%
reframe(p2_not1 = mean(away_wins)*100)
p2_not1
###
p1$p1
p2$p2
p21$p21
p2_not1$p2_not1
###
round(p1$p1,2)
round(p2$p2,2)
round(p21$p21,2)
round(p2_not1$p2_not1,2)
source("A0_header.R")
setwd("~/Dropbox/Mac (2)/Desktop/RESEARCH/golf_empirical_bayes_skill")
source("A0_header.R")
###########################
### model specification ###
###########################
### Empirical Bayes Model:
# index (i,j): player i in hole j
# outcome X_{ij} for player i in hole j
#    putts over expected (putting) or strokes gained (driving, irons)
# X_{ij} ~ N(mu_i, sig^2_i)
#   mu_i ~ N(mu, tau^2)
# estimate putter skills {mu_i} for each putter i
# EB estimators:
#     V_hat_i = 1 / [N_i/sig_hat^2_i + 1/tau_hat^2]
#     mu_hat_i = V_hat_i â€¢ [(sum_j X_{ij})/sig_hat^2_i + mu_hat/tau_hat^2]
#     posterior mu_i | {X_{ij}} ~ N(mu_hat_i, V_hat_i)
#################
### read data ###
#################
df_holes_putting = read_csv("data_holeByHole_putting.csv", show_col_types = F) %>% rename(X = PUE, N = nHoles)
df_holes_driving = read_csv("data_holeByHole_driving.csv", show_col_types = F) %>% rename(X = SG, N = nHoles)
df_holes_irons = read_csv("data_holeByHole_irons.csv", show_col_types = F) %>% rename(X = SG, N = nHoles)
df_list = list(
"Driving" = df_holes_driving,
# "Iron" = df_holes_irons,
"Putting" = df_holes_putting
)
df_list
metrics_list = list(
"Driving" = "Stroked Gained (higher is better)",
# "Iron" = "Stroked Gained (higher is better)",
# "Putting" = "Putts Over Expected (lower is better)"
"Putting" = "Putts Under Expected (higher is better)"
)
######################################
### Empirical Bayes Skill Function ###
######################################
fit_params.EB.mle <- function(epsilon=1e-5, df0) {
### first, fit the MLE hyperparams mu.hat, tau.sq.hat, sig.sq.i.hat
### initialize
iter = 1
df = df0 %>% select(Player_num, X)
mu.hat = df %>% group_by(Player_num) %>% summarise(mu = mean(X)) %>% summarise(mu = mean(mu))
full.var = var(df$X)
params.df = df %>%
group_by(Player_num) %>%
reframe(sig.sq.i.hat = var(X)) %>%
mutate(sig.sq.i.hat = median(sig.sq.i.hat))
params.df$mu.hat = mu.hat$mu
params.df$tau.sq.hat = full.var - mean(params.df$sig.sq.i.hat)
params.df
train.df = df %>% left_join(params.df)
train.df
### iteratively solve for MLE mu.hat, tau.sq.hat, sig.sq.i.hat
while (TRUE) {
print(paste0("running iteration ", iter))
### save previous values
train.df.prev = train.df
### solve for mu.hat
mu.hat = train.df %>%
summarise(
t1 = sum(X / (sig.sq.i.hat + tau.sq.hat)),
t2 = sum(1 / (sig.sq.i.hat + tau.sq.hat)),
) %>%
mutate(
mu.hat = t1/t2
)
mu.hat = mu.hat$mu.hat
mu.hat
train.df$mu.hat = mu.hat
### solve for tau.sq.hat
solve.for.tau.sq <- function(tau.sq) {
temp.df =
train.df %>%
select(-tau.sq.hat) %>%
mutate(
t1 = 1 / (sig.sq.i.hat + tau.sq),
t1.sq = t1^2,
dd = (X - mu.hat)^2,
t2 = dd*t1.sq,
diff = t1 - t2
)
temp.df
(temp.df %>% summarise(ans = sum(diff)))$ans
}
# browser()
# tau.sq.hat = uniroot(solve.for.tau.sq, c(0.0001,0.02))
tau.sq.hat = uniroot(solve.for.tau.sq, c(0.00000001,50000000))
tau.sq.hat = tau.sq.hat$root
tau.sq.hat
train.df$tau.sq.hat = tau.sq.hat
### solve for sig.sq.p
pitchers = unique(train.df$Player_num)
sig.sq.p.vec = numeric(length(pitchers))
for (i in 1:length(pitchers)) {
if (i %% 50 == 0) print(paste0("computing sig.sq.i.hat for pitcher i=",i,"/",length(pitchers)))
pit_i = pitchers[i]
train.df_i = train.df %>% filter(Player_num == pit_i)
solve.for.sig.sq <- function(sig.sq.p) {
temp.df =
train.df_i %>%
select(-sig.sq.i.hat) %>%
mutate(
dd = (X - mu.hat)^2,
t1 = 1 / (sig.sq.p + tau.sq.hat),
t1.sq = t1^2,
t2 = dd*t1.sq,
diff = t1 - t2
)
temp.df
(temp.df %>% summarise(ans = sum(diff)))$ans
}
# solve.for.sig.sq(0.01)
# sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.0001,1))
sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.000000001,50))
sig.sq.i.hat = sig.sq.i.hat$root
sig.sq.p.vec[i] = sig.sq.i.hat
}
train.df = train.df %>% select(-sig.sq.i.hat) %>% left_join(
tibble(Player_num = pitchers, sig.sq.i.hat = sig.sq.p.vec)
)
### check convergence
mu.hat.conv = abs(unique(train.df$mu.hat) - unique(train.df.prev$mu.hat))
tau.sq.hat.conv = abs(unique(train.df$tau.sq.hat) - unique(train.df.prev$tau.sq.hat))
sig.sq.hat.df.prev = train.df.prev %>% group_by(Player_num) %>% summarise(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.df = train.df %>% group_by(Player_num) %>% summarise(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.conv = max(abs(sig.sq.hat.df$sig.sq.i.hat - sig.sq.hat.df.prev$sig.sq.i.hat))
conv.num = max(c(mu.hat.conv, tau.sq.hat.conv, sig.sq.hat.conv))
print(paste0("conv.num = ", conv.num))
if (conv.num < epsilon) {
break
}
### increment
iter = iter + 1
}
### dataframe of fitted MLE hyperparams
df.hyperparams = train.df %>% distinct(Player_num, mu.hat, tau.sq.hat, sig.sq.i.hat)
df.hyperparams
### now, get the empirical Bayes pitcher quality estimates
df.mu.hat.i = train.df %>%
group_by(Player_num) %>%
summarise(
tA = sum(X)/sig.sq.i.hat,
tB = mu.hat/tau.sq.hat,
tC = n()/sig.sq.i.hat,
tD = 1/tau.sq.hat
) %>%
distinct() %>%
summarise(
V.hat.i = 1/(tC + tD),
mu.hat.i = (tA + tB)*V.hat.i,
)
df.mu.hat.i
### result dataframe
df.result = df.mu.hat.i %>% left_join(df.hyperparams)
df.result
df.result %>% arrange(-mu.hat.i)
}
###############
### Results ###
###############
for (stroke_category in names(df_list)) {
print(stroke_category)
### dataframe
df_s = df_list[[stroke_category]]
### fit the empirical bayes parameters
df_EB_fit = fit_params.EB.mle(epsilon=1e-4, df0 = df_s)
df_EB_fit
### cleaned Empirical Bayes results dataframe
df.EB.results =
df_EB_fit %>%
select(Player_num, mu.hat.i, V.hat.i) %>%
left_join(
df_s %>% distinct(Player_num, Player, N)
) %>%
left_join(
df_s %>% group_by(Player,Player_num,N) %>% reframe(mu.hat.MLE.i = mean(X))
) %>%
relocate(Player, .after=Player_num) %>%
mutate(
p_val = 2*pnorm(-abs(mu.hat.i)/sqrt(V.hat.i))
) %>%
arrange(p_val)
df.EB.results
write_csv(df.EB.results, paste0("results_EB_estimates_",stroke_category,".csv"))
### visualize
num_golfers = nrow(df.EB.results)
plot_EB_estimates =
df.EB.results %>%
ggplot(aes(x = mu.hat.i, y = fct_reorder(Player, mu.hat.i))) +
geom_point() +
geom_vline(xintercept=0) +
ylab("Golfer") +
theme(
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
) +
xlab(paste0(
"Estimated ",firstup(stroke_category)," Skill",
" via Empirical Bayes (N=",num_golfers,")",
"\nscale: ", metrics_list[[stroke_category]]
))
# plot_EB_estimates
ggsave(paste0("results_plot_EB_",stroke_category,".png"), plot_EB_estimates, width=6, height=4)
### visualize: how much shrinkage?
plot_EB_shrinkage =
df.EB.results  %>%
ggplot(aes(x=mu.hat.MLE.i, y=mu.hat.i, color=N, size=N)) +
xlab(TeX("the observed mean $\\hat{\\mu}^{(MLE)}_i$")) +
ylab(TeX("$\\hat{\\mu}_i$")) +
geom_abline(intercept=0, slope=1, linewidth=1, linetype="dashed", color="gray60") +
geom_point(alpha=0.6) +
# xlim(c(-0.15, 0.15)) +
# ylim(c(-0.075, 0.075)) +
labs(title=paste0("Visualizing Shrinkage for ", stroke_category, " Skill"))
# plot_EB_shrinkage
ggsave(paste0("results_plot_EB_shrinkage_",stroke_category,".png"), plot_EB_shrinkage, width=6, height=4)
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
alphas = c(0.01, 0.05, 0.10, 0.15, 0.20, 0.25, 0.5)
nsig_golfers = c()
df_pvals_BH = tibble()
for (alpha in alphas) {
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
p_vals = df.EB.results$p_val
p_vals_adjusted_BH = p.adjust(p_vals, method = "BH", n=length(p_vals))
significant_putters = which(p_vals_adjusted_BH <= alpha) # Identify significant discoveries at FDR 0.05
nsig = length(significant_putters)
nsig_golfers = c(nsig_golfers, nsig)
###
N <- length(p_vals)
df_pvals_BH_alpha =
tibble(
alpha = alpha,
rank = 1:N,
pval = sort(p_vals),
bh_threshold = alpha * (1:N) / N,
)
df_pvals_BH = bind_rows(df_pvals_BH, df_pvals_BH_alpha)
}
### plot Benjamini Hochberg
plot_BH =
df_pvals_BH %>%
ggplot(aes(x = rank)) +
geom_point(aes(y = pval), color = "black", size = 1.5) +
geom_line(aes(y = bh_threshold, color=factor(alpha)), linewidth = 0.5) +
# geom_hline(yintercept=alpha, linetype = "dashed", color = "gray60") +
labs(
color = "\U1D6FC",
title = paste0("Benjamini-Hochberg FDR Control for ",firstup(stroke_category)),
x = "P-value Rank",
y = "P-value",
)
# plot_BH
ggsave(paste0("results_plot_BH_",stroke_category,".png"), plot_BH, width=8, height=5)
###
df_BH_desc =
tibble(alpha = alphas, nsig = nsig_golfers) %>%
mutate(stroke_category = stroke_category) %>%
mutate(desc = paste(round((1-alpha)*nsig),"of",nsig,"golfers are significantly nonzero"))
df_BH_desc
# write_csv(df_BH_desc, paste0("results_desc_BH_",stroke_category,".csv"))
gt_BH_desc = gt::gt(df_BH_desc)
# gt_BH_desc
gt::gtsave(gt_BH_desc, paste0("results_desc_BH_",stroke_category,".png"))
}
