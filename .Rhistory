)
temp.df
(temp.df %>% reframe(ans = sum(diff)))$ans
}
# tau.sq.hat = uniroot(solve.for.tau.sq, c(0.0001,0.02))
tau.sq.hat = uniroot(solve.for.tau.sq, c(0.00000001,50000000))
tau.sq.hat = tau.sq.hat$root
tau.sq.hat
train.df$tau.sq.hat = tau.sq.hat
### solve for sig.sq.p
golfers = unique(train.df$Player_num)
sig.sq.p.vec = numeric(length(golfers))
for (i in 1:length(golfers)) {
if (i %% 50 == 0) print(paste0("computing sig.sq.i.hat for golfer i=",i,"/",length(golfers)))
pit_i = golfers[i]
train.df_i = train.df %>% filter(Player_num == pit_i)
solve.for.sig.sq <- function(sig.sq.p) {
temp.df =
train.df_i %>%
select(-sig.sq.i.hat) %>%
mutate(
dd = (X - mu.hat)^2,
t1 = 1 / (sig.sq.p + tau.sq.hat),
t1.sq = t1^2,
t2 = dd*t1.sq,
diff = t1 - t2
)
temp.df
(temp.df %>% reframe(ans = sum(diff)))$ans
}
# solve.for.sig.sq(0.01)
# sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.0001,1))
sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.000000001,50))
sig.sq.i.hat = sig.sq.i.hat$root
sig.sq.p.vec[i] = sig.sq.i.hat
}
train.df = train.df %>% select(-sig.sq.i.hat) %>% left_join(
tibble(Player_num = golfers, sig.sq.i.hat = sig.sq.p.vec)
)
### check convergence
mu.hat.conv = abs(unique(train.df$mu.hat) - unique(train.df.prev$mu.hat))
tau.sq.hat.conv = abs(unique(train.df$tau.sq.hat) - unique(train.df.prev$tau.sq.hat))
sig.sq.hat.df.prev = train.df.prev %>% group_by(Player_num) %>% reframe(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.df = train.df %>% group_by(Player_num) %>% reframe(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.conv = max(abs(sig.sq.hat.df$sig.sq.i.hat - sig.sq.hat.df.prev$sig.sq.i.hat))
conv.num = max(c(mu.hat.conv, tau.sq.hat.conv, sig.sq.hat.conv))
print(paste0("conv.num = ", conv.num))
if (conv.num < epsilon) {
break
}
### increment
iter = iter + 1
}
### dataframe of fitted MLE hyperparams
df.hyperparams = train.df %>% distinct(Player_num, mu.hat, tau.sq.hat, sig.sq.i.hat)
df.hyperparams
### now, get the empirical Bayes golfer quality estimates
df.mu.hat.i = train.df %>%
group_by(Player_num) %>%
reframe(
tA = sum(X)/sig.sq.i.hat,
tB = mu.hat/tau.sq.hat,
tC = n()/sig.sq.i.hat,
tD = 1/tau.sq.hat
) %>%
distinct() %>%
group_by(Player_num) %>%
reframe(
V.hat.i = 1/(tC + tD),
mu.hat.i = (tA + tB)*V.hat.i,
)
df.mu.hat.i
### result dataframe
df.result = df.mu.hat.i %>% left_join(df.hyperparams)
df.result
df.result %>% arrange(-mu.hat.i)
}
###############
### Results ###
###############
alphas = c(0.01, 0.05, 0.10, 0.15) #, 0.20, 0.25, 0.5)
df.EB.results.full = tibble()
df_pvals_BH.full = tibble()
df_nsig.full = tibble()
for (stroke_category in unique(df0$stroke_grp)) {
print(stroke_category)
### dataframe
df_s = df0 %>% filter(stroke_grp == stroke_category) %>% rename(X = SUE, N = nHoles_grp)
### fit the empirical bayes parameters
df_EB_fit = fit_params.EB.mle(df0 = df_s)
df_EB_fit
### cleaned Empirical Bayes results dataframe
df.EB.results =
df_EB_fit %>%
select(Player_num, mu.hat.i, V.hat.i) %>%
left_join(
df_s %>% distinct(Player_num, Player, N)
) %>%
left_join(
df_s %>% group_by(Player,Player_num,N) %>% reframe(mu.hat.MLE.i = mean(X))
) %>%
relocate(Player, .after=Player_num) %>%
mutate(
p_val = 2*pnorm(-abs(mu.hat.i)/sqrt(V.hat.i))
) %>%
arrange(p_val)
df.EB.results$stroke_category = stroke_category
df.EB.results
df.EB.results.full = bind_rows(df.EB.results.full, df.EB.results)
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
nsig_golfers = c()
df_pvals_BH = tibble()
for (alpha in alphas) {
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
p_vals = df.EB.results$p_val
p_vals_adjusted_BH = p.adjust(p_vals, method = "BH", n=length(p_vals))
significant_putters = which(p_vals_adjusted_BH <= alpha) # Identify significant discoveries at FDR 0.05
nsig = length(significant_putters)
nsig_golfers = c(nsig_golfers, nsig)
###
N <- length(p_vals)
df_pvals_BH_alpha =
tibble(
alpha = alpha,
rank = 1:N,
pval = sort(p_vals),
bh_threshold = alpha * (1:N) / N,
)
df_pvals_BH = bind_rows(df_pvals_BH, df_pvals_BH_alpha)
df_pvals_BH$stroke_category = stroke_category
df_pvals_BH.full = bind_rows(df_pvals_BH.full, df_pvals_BH)
}
df_nsig = tibble(alpha = alphas, nsig = nsig_golfers, stroke_category = stroke_category)
df_nsig
df_nsig.full = bind_rows(df_nsig.full, df_nsig)
}
df.EB.results.full$stroke_category = factor(df.EB.results.full$stroke_category, levels = stroke_grp_levels)
df_pvals_BH.full$stroke_category = factor(df_pvals_BH.full$stroke_category, levels = stroke_grp_levels)
df_nsig.full$stroke_category = factor(df_nsig.full$stroke_category, levels = stroke_grp_levels)
################
### Plotting ###
################
### Top 5 Golfers
top_N = 5
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
datasummary_df(df_topGolfers)
colnames(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "\\alpha"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\alpha$"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\alpha$"
datasummary_df(df_topGolfers)
library(modelsummary)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\alpha$"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = TeX("$\\alpha$")
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\alpha$"
datasummary_df(df_topGolfers)
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\\alpha$"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\\alpha$"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "$\\alpha$"
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "\\overline{x}"
datasummary_df(df_topGolfers)
datasummary_df(as.data.frame(df_topGolfers))
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "\\overline{x}"
datasummary_df(as.data.frame(df_topGolfers))
datasummary_df(df_topGolfers)
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
colnames(df_topGolfers)[colnames(df_topGolfers)=="mu_hat"] = "\\overline{x}"
datasummary_df(df_topGolfers)
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = TeX("$$\\beta$$")) %>%
cols_label(mu_hat = "\U00B5") %>%
# cols_label(mu_hat = "\U1D707") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
df_topGolfers =
df.EB.results.full %>%
arrange(stroke_category, -mu.hat.i) %>%
group_by(stroke_category) %>%
slice_head(n = top_N) %>%
select(stroke_category, Player, mu.hat.i, N) %>%
rename(Stroke = stroke_category, mu_hat = mu.hat.i)
df_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = TeX("$$\\beta$$")) %>%
cols_label(mu_hat = "\U00B5") %>%
# cols_label(mu_hat = "\U1D707") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
# gt_topGolfers %>% as_latex() %>% as.character()
gtsave(gt_topGolfers, "results_plot_topGolfers.png")
df_nsig.full
df_nsig.full
### Num significant golfers table
df_nsig.full %>%
relocate(stroke_category, .before = alpha) %>%
rename(Stroke = stroke_category) %>%
mutate(x = (1-alpha)*nsig)
### Num significant golfers table
df_nSigGolfers =
df_nsig.full %>%
relocate(stroke_category, .before = alpha) %>%
rename(Stroke = stroke_category) %>%
mutate(x = (1-alpha)*nsig)
df_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers)
gt_nSigGolfers
### Num significant golfers table
df_nSigGolfers =
df_nsig.full %>%
relocate(stroke_category, .before = alpha) %>%
rename(Stroke = stroke_category) %>%
mutate(x = (1-alpha)*nsig) %>%
group_by(Stroke)
df_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers)
gt_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers)  %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers) %>%
cols_label(alpha = "\U1D6FC") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers) %>%
cols_label(alpha = "\U1D6FC", nsig = "M") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_nSigGolfers
gt_nSigGolfers =
gt(df_nSigGolfers) %>%
cols_label(alpha = "\U1D6FC", nsig = "M", x = "(1-\U1D6FC)•M") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_nSigGolfers
gtsave(gt_nSigGolfers, paste0("results_plot_BH_nSig.png"))
# gt_nSigGolfers
gtsave(gt_nSigGolfers, paste0("results_plot_BH_nSig.png"))
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 \nvia Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 \n via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 <br> via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 <br> via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)  %>%
fmt_markdown(columns = TRUE)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 <br> via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)  %>%
fmt_markdown(columns = everything())
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = "Estimated \U00B5 <br> via Empirical Bayes") %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 <br> via Empirical Bayes")) %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 via <br> Empirical Bayes")) %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 via <br> Empirical Bayes")) %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
# gt_topGolfers
gtsave(gt_topGolfers, "results_plot_topGolfers.png")
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 via <br> Empirical Bayes")) %>%
tab_options(row_group.layout = "horizontal")  %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 via <br> Empirical Bayes")) %>%
tab_options(row_group.layout = "horizontal")  %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gt_topGolfers =
gt(df_topGolfers) %>%
fmt_number("mu_hat", decimals=3) %>%
# cols_label(mu_hat = "\U00B5") %>%
cols_label(mu_hat = html("Estimated \U00B5 via <br> Empirical Bayes")) %>%
tab_options(row_group.as_column = TRUE)  %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_topGolfers
gtsave(gt_topGolfers, "results_plot_topGolfers.png")
gtsave(gt_topGolfers, "results_plot_topGolfers.png")
gt_nSigGolfers =
gt(df_nSigGolfers) %>%
cols_label(alpha = "\U1D6FC", nsig = "M", x = "(1-\U1D6FC)•M") %>%
tab_options(row_group.as_column = TRUE)  %>%
gt::tab_style(
style = gt::cell_text(weight = "bold"),
locations = gt::cells_row_groups(groups = everything())
)
gt_nSigGolfers
gtsave(gt_nSigGolfers, paste0("results_plot_BH_nSig.png"))
gtsave(gt_nSigGolfers, paste0("results_plot_BH_nSig.png"))
