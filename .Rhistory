geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3)
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set2")
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3)
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
table(df0$Player)
# player_str = "Spieth|Woods|Simpson"
player_str = "Spieth|Woods|Bjorn"
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3)
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
# player_str = "Spieth|Woods|Simpson"
player_str = "Spieth|Woods|Blixt"
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3)
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
geom_density(alpha=0.3)
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
geom_density(alpha=0.3) +
# geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3) +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE)) +
facet_wrap(~ Player + stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density()
geom_histogram()
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3) +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3) +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=4)
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected") +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab("Strokes under expected X_{is}") +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab(TeX("Strokes under expected $$X_{is}$$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
xlab(TeX("Strokes under expected $X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("$X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("$Strokes Under Expected X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("$Strokes \ Under \ Expected X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("$Strokes Under Expected X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("Strokes $Under Expected X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("Strokes Under Expected $X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
plot_exGolferDists
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{is}$")) +
xlab(TeX("Strokes Under Expected $X_{is}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
# plot_exGolferDists
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{ijs}$")) +
xlab(TeX("Strokes Under Expected $X_{ijs}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
# plot_exGolferDists
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
plot_exGolferDists =
df0 %>%
filter(str_detect(Player, player_str)) %>%
ggplot(aes(x = SUE, fill = Player)) +
facet_wrap(~ stroke_grp) +
geom_vline(xintercept=0, color="gray60", linetype="dashed") +
# xlab(TeX("Strokes under expected $X_{ijs}$")) +
xlab(TeX("Strokes Under Expected $X_{ijs}$")) +
# ylab("Density") +
# geom_density(alpha=0.3) +
ylab("Count") +
geom_histogram(alpha=1) +
scale_fill_brewer(palette="Set1")
# plot_exGolferDists
ggsave(paste0("results_plot_exGolferDists.png"),
plot_exGolferDists, width=10, height=3)
######################################
### Empirical Bayes Skill Function ###
######################################
fit_params.EB.mle <- function(epsilon=1e-4, df0) {
### first, fit the MLE hyperparams mu.hat, tau.sq.hat, sig.sq.i.hat
### initialize
iter = 1
df = df0 %>% select(Player_num, X)
mu.hat = df %>% group_by(Player_num) %>% reframe(mu = mean(X)) %>% reframe(mu = mean(mu))
full.var = var(df$X)
params.df = df %>%
group_by(Player_num) %>%
reframe(sig.sq.i.hat = var(X)) %>%
mutate(sig.sq.i.hat = median(sig.sq.i.hat))
params.df$mu.hat = mu.hat$mu
params.df$tau.sq.hat = full.var - mean(params.df$sig.sq.i.hat)
params.df
train.df = df %>% left_join(params.df)
train.df
### iteratively solve for MLE mu.hat, tau.sq.hat, sig.sq.i.hat
while (TRUE) {
print(paste0("running iteration ", iter))
### save previous values
train.df.prev = train.df
### solve for mu.hat
mu.hat = train.df %>%
reframe(
t1 = sum(X / (sig.sq.i.hat + tau.sq.hat)),
t2 = sum(1 / (sig.sq.i.hat + tau.sq.hat)),
) %>%
mutate(
mu.hat = t1/t2
)
mu.hat = mu.hat$mu.hat
mu.hat
train.df$mu.hat = mu.hat
### solve for tau.sq.hat
solve.for.tau.sq <- function(tau.sq) {
temp.df =
train.df %>%
select(-tau.sq.hat) %>%
mutate(
t1 = 1 / (sig.sq.i.hat + tau.sq),
t1.sq = t1^2,
dd = (X - mu.hat)^2,
t2 = dd*t1.sq,
diff = t1 - t2
)
temp.df
(temp.df %>% reframe(ans = sum(diff)))$ans
}
# tau.sq.hat = uniroot(solve.for.tau.sq, c(0.0001,0.02))
tau.sq.hat = uniroot(solve.for.tau.sq, c(0.00000001,50000000))
tau.sq.hat = tau.sq.hat$root
tau.sq.hat
train.df$tau.sq.hat = tau.sq.hat
### solve for sig.sq.p
golfers = unique(train.df$Player_num)
sig.sq.p.vec = numeric(length(golfers))
for (i in 1:length(golfers)) {
if (i %% 50 == 0) print(paste0("computing sig.sq.i.hat for golfer i=",i,"/",length(golfers)))
pit_i = golfers[i]
train.df_i = train.df %>% filter(Player_num == pit_i)
solve.for.sig.sq <- function(sig.sq.p) {
temp.df =
train.df_i %>%
select(-sig.sq.i.hat) %>%
mutate(
dd = (X - mu.hat)^2,
t1 = 1 / (sig.sq.p + tau.sq.hat),
t1.sq = t1^2,
t2 = dd*t1.sq,
diff = t1 - t2
)
temp.df
(temp.df %>% reframe(ans = sum(diff)))$ans
}
# solve.for.sig.sq(0.01)
# sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.0001,1))
sig.sq.i.hat = uniroot(solve.for.sig.sq, c(0.000000001,50))
sig.sq.i.hat = sig.sq.i.hat$root
sig.sq.p.vec[i] = sig.sq.i.hat
}
train.df = train.df %>% select(-sig.sq.i.hat) %>% left_join(
tibble(Player_num = golfers, sig.sq.i.hat = sig.sq.p.vec)
)
### check convergence
mu.hat.conv = abs(unique(train.df$mu.hat) - unique(train.df.prev$mu.hat))
tau.sq.hat.conv = abs(unique(train.df$tau.sq.hat) - unique(train.df.prev$tau.sq.hat))
sig.sq.hat.df.prev = train.df.prev %>% group_by(Player_num) %>% reframe(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.df = train.df %>% group_by(Player_num) %>% reframe(sig.sq.i.hat = unique(sig.sq.i.hat))
sig.sq.hat.conv = max(abs(sig.sq.hat.df$sig.sq.i.hat - sig.sq.hat.df.prev$sig.sq.i.hat))
conv.num = max(c(mu.hat.conv, tau.sq.hat.conv, sig.sq.hat.conv))
print(paste0("conv.num = ", conv.num))
if (conv.num < epsilon) {
break
}
### increment
iter = iter + 1
}
### dataframe of fitted MLE hyperparams
df.hyperparams = train.df %>% distinct(Player_num, mu.hat, tau.sq.hat, sig.sq.i.hat)
df.hyperparams
### now, get the empirical Bayes golfer quality estimates
df.mu.hat.i = train.df %>%
group_by(Player_num) %>%
reframe(
tA = sum(X)/sig.sq.i.hat,
tB = mu.hat/tau.sq.hat,
tC = n()/sig.sq.i.hat,
tD = 1/tau.sq.hat
) %>%
distinct() %>%
group_by(Player_num) %>%
reframe(
V.hat.i = 1/(tC + tD),
mu.hat.i = (tA + tB)*V.hat.i,
)
df.mu.hat.i
### result dataframe
df.result = df.mu.hat.i %>% left_join(df.hyperparams)
df.result
df.result %>% arrange(-mu.hat.i)
}
###############
### Results ###
###############
alphas = c(0.01, 0.05, 0.10, 0.15) #, 0.20, 0.25, 0.5)
df.EB.results.full = tibble()
df_pvals_BH.full = tibble()
df_nsig.full = tibble()
for (stroke_category in unique(df0$stroke_grp)) {
print(stroke_category)
### dataframe
df_s = df0 %>% filter(stroke_grp == stroke_category) %>% rename(X = SUE, N = nHoles_grp)
### fit the empirical bayes parameters
df_EB_fit = fit_params.EB.mle(df0 = df_s)
df_EB_fit
### cleaned Empirical Bayes results dataframe
df.EB.results =
df_EB_fit %>%
select(Player_num, mu.hat.i, V.hat.i) %>%
left_join(
df_s %>% distinct(Player_num, Player, N)
) %>%
left_join(
df_s %>% group_by(Player,Player_num,N) %>% reframe(mu.hat.MLE.i = mean(X))
) %>%
relocate(Player, .after=Player_num) %>%
mutate(
p_val = 2*pnorm(-abs(mu.hat.i)/sqrt(V.hat.i))
) %>%
arrange(p_val)
df.EB.results$stroke_category = stroke_category
df.EB.results
df.EB.results.full = bind_rows(df.EB.results.full, df.EB.results)
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
nsig_golfers = c()
df_pvals_BH = tibble()
for (alpha in alphas) {
### Multiple Testing: Benjamini-Hochberg (BH) to control the False Discovery Rate (FDR)
p_vals = df.EB.results$p_val
p_vals_adjusted_BH = p.adjust(p_vals, method = "BH", n=length(p_vals))
significant_putters = which(p_vals_adjusted_BH <= alpha) # Identify significant discoveries at FDR 0.05
nsig = length(significant_putters)
nsig_golfers = c(nsig_golfers, nsig)
###
N <- length(p_vals)
df_pvals_BH_alpha =
tibble(
alpha = alpha,
rank = 1:N,
pval = sort(p_vals),
bh_threshold = alpha * (1:N) / N,
)
df_pvals_BH = bind_rows(df_pvals_BH, df_pvals_BH_alpha)
df_pvals_BH$stroke_category = stroke_category
df_pvals_BH.full = bind_rows(df_pvals_BH.full, df_pvals_BH)
}
df_nsig = tibble(alpha = alphas, nsig = nsig_golfers, stroke_category = stroke_category)
df_nsig
df_nsig.full = bind_rows(df_nsig.full, df_nsig)
}
df.EB.results.full$stroke_category = factor(df.EB.results.full$stroke_category, levels = stroke_grp_levels)
df_pvals_BH.full$stroke_category = factor(df_pvals_BH.full$stroke_category, levels = stroke_grp_levels)
df_nsig.full$stroke_category = factor(df_nsig.full$stroke_category, levels = stroke_grp_levels)
### contextualize the effect sizes
df.EB.results.full
### contextualize the effect sizes
df.EB.results.full %>%
group_by(stroke_category) %>%
reframe(
quantile(mu.hat.i, 0.05)
)
### contextualize the effect sizes
df.EB.results.full %>%
group_by(stroke_category) %>%
reframe(
quantile(mu.hat.i, 0.05),
quantile(mu.hat.i, 0.95)
)
### contextualize the effect sizes
df.EB.results.full %>%
group_by(stroke_category) %>%
reframe(
qL = quantile(mu.hat.i, 0.05),
qU = quantile(mu.hat.i, 0.95)
) %>%
mutate(delta = qU - qL)
### contextualize the effect sizes
df.EB.results.full %>%
group_by(stroke_category) %>%
reframe(
qL = quantile(mu.hat.i, 0.05),
qU = quantile(mu.hat.i, 0.95)
) %>%
mutate(
delta_hole = qU - qL,
delta_tourn = delta_hole*72,
)
6.5+5.9+3.2
6.50+5.89+3.19
3.2/15.5
